diff --git a/Cargo.toml b/Cargo.toml
index 8bfd09b..3204bfe 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,4 +1,4 @@
-# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
+#THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
 #
 # When uploading crates to the registry Cargo will automatically
 # "normalize" Cargo.toml files for maximal compatibility
@@ -153,6 +153,9 @@ version = "4.0"
 features = ["url"]
 default-features = false
 
+[dependencies.zvariant]
+version = "4.2.0"
+
 [dev-dependencies.reis]
 version = "0.2.0"
 features = ["tokio"]
diff --git a/Cargo.toml.orig b/Cargo.toml.orig
index 79018c8..413867c 100644
--- a/Cargo.toml.orig
+++ b/Cargo.toml.orig
@@ -22,7 +22,7 @@ tokio = ["zbus/tokio", "dep:tokio"]
 glib = ["dep:glib"]
 wayland = ["wayland-client", "wayland-protocols", "wayland-backend"]
 
-[dependencies]
+[dependencies]]]
 async-fs = { version = "2.1.0", optional = true }
 async-net = { version = "2.0.0", optional = true }
 enumflags2 = "0.7"
diff --git a/src/activation_token/mod.rs b/src/activation_token/mod.rs
index 46836bb..a685e45 100644
--- a/src/activation_token/mod.rs
+++ b/src/activation_token/mod.rs
@@ -1,7 +1,7 @@
 use std::ops::Deref;
 
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::Type;
+use zvariant::Type;
 
 /// A token that can be used to activate an application.
 ///
diff --git a/src/app_id.rs b/src/app_id.rs
index 6a11a75..c09af04 100644
--- a/src/app_id.rs
+++ b/src/app_id.rs
@@ -1,7 +1,7 @@
 use std::{ops::Deref, str::FromStr};
 
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::Type;
+use zvariant::Type;
 
 /// The application ID.
 ///
diff --git a/src/desktop/account.rs b/src/desktop/account.rs
index 9a122d4..12e5420 100644
--- a/src/desktop/account.rs
+++ b/src/desktop/account.rs
@@ -22,7 +22,7 @@
 //! }
 //! ```
 
-use zbus::zvariant::{DeserializeDict, SerializeDict, Type};
+use zvariant::{DeserializeDict, SerializeDict, Type};
 
 use super::HandleToken;
 use crate::{desktop::request::Request, proxy::Proxy, Error, WindowIdentifier};
diff --git a/src/desktop/background.rs b/src/desktop/background.rs
index d4973e4..db8a5d9 100644
--- a/src/desktop/background.rs
+++ b/src/desktop/background.rs
@@ -31,7 +31,7 @@
 //! file](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#introduction) will be used.
 
 use serde::Serialize;
-use zbus::zvariant::{DeserializeDict, SerializeDict, Type};
+use zvariant::{DeserializeDict, SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, Error, WindowIdentifier};
diff --git a/src/desktop/camera.rs b/src/desktop/camera.rs
index 2a16870..5e54cfa 100644
--- a/src/desktop/camera.rs
+++ b/src/desktop/camera.rs
@@ -21,7 +21,7 @@ use std::{collections::HashMap, os::fd::OwnedFd};
 
 #[cfg(feature = "pipewire")]
 use pipewire::{context::Context, main_loop::MainLoop};
-use zbus::zvariant::{self, SerializeDict, Type, Value};
+use zvariant::{self, SerializeDict, Type, Value};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, Error};
diff --git a/src/desktop/clipboard.rs b/src/desktop/clipboard.rs
index aedb437..b60e5ea 100644
--- a/src/desktop/clipboard.rs
+++ b/src/desktop/clipboard.rs
@@ -6,7 +6,7 @@
 use std::collections::HashMap;
 
 use futures_util::{Stream, StreamExt};
-use zbus::zvariant::{DeserializeDict, OwnedFd, OwnedObjectPath, SerializeDict, Type, Value};
+use zvariant::{DeserializeDict, OwnedFd, OwnedObjectPath, SerializeDict, Type, Value};
 
 use super::{remote_desktop::RemoteDesktop, Session};
 use crate::{proxy::Proxy, Result};
diff --git a/src/desktop/color.rs b/src/desktop/color.rs
index 259e444..5c77c4b 100644
--- a/src/desktop/color.rs
+++ b/src/desktop/color.rs
@@ -1,4 +1,4 @@
-use crate::zvariant::{self, DeserializeDict, Type};
+use zvariant::{self, DeserializeDict, Type};
 
 #[derive(DeserializeDict, Clone, Copy, PartialEq, Type, zvariant::Value, zvariant::OwnedValue)]
 /// A color as a RGB tuple.
diff --git a/src/desktop/device.rs b/src/desktop/device.rs
index 1913a42..ac4f7f2 100644
--- a/src/desktop/device.rs
+++ b/src/desktop/device.rs
@@ -19,7 +19,7 @@
 use std::{fmt, str::FromStr};
 
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::{SerializeDict, Type};
+use zvariant::{SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, Error, Pid};
diff --git a/src/desktop/dynamic_launcher.rs b/src/desktop/dynamic_launcher.rs
index 250c277..411f870 100644
--- a/src/desktop/dynamic_launcher.rs
+++ b/src/desktop/dynamic_launcher.rs
@@ -55,7 +55,7 @@ use std::collections::HashMap;
 use enumflags2::{bitflags, BitFlags};
 use serde::{Deserialize, Serialize};
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{self, DeserializeDict, OwnedValue, SerializeDict, Type, Value};
+use zvariant::{self, DeserializeDict, OwnedValue, SerializeDict, Type, Value};
 
 use super::{HandleToken, Icon, Request};
 use crate::{proxy::Proxy, ActivationToken, Error, WindowIdentifier};
diff --git a/src/desktop/email.rs b/src/desktop/email.rs
index 47cb200..50536be 100644
--- a/src/desktop/email.rs
+++ b/src/desktop/email.rs
@@ -27,7 +27,7 @@
 use std::os::fd::OwnedFd;
 
 use serde::Serialize;
-use zbus::zvariant::{self, SerializeDict, Type};
+use zvariant::{self, SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, ActivationToken, Error, WindowIdentifier};
diff --git a/src/desktop/file_chooser.rs b/src/desktop/file_chooser.rs
index 3d29f56..1e082a4 100644
--- a/src/desktop/file_chooser.rs
+++ b/src/desktop/file_chooser.rs
@@ -83,7 +83,7 @@ use std::path::Path;
 
 use serde::{Deserialize, Serialize};
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{DeserializeDict, SerializeDict, Type};
+use zvariant::{DeserializeDict, SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, Error, FilePath, WindowIdentifier};
diff --git a/src/desktop/game_mode.rs b/src/desktop/game_mode.rs
index 92c21a4..f50072d 100644
--- a/src/desktop/game_mode.rs
+++ b/src/desktop/game_mode.rs
@@ -18,7 +18,7 @@
 use std::{fmt::Debug, os::fd::BorrowedFd};
 
 use serde_repr::Deserialize_repr;
-use zbus::zvariant::{Fd, Type};
+use zvariant::{Fd, Type};
 
 use crate::{error::PortalError, proxy::Proxy, Error, Pid};
 
diff --git a/src/desktop/global_shortcuts.rs b/src/desktop/global_shortcuts.rs
index c95efab..e44b549 100644
--- a/src/desktop/global_shortcuts.rs
+++ b/src/desktop/global_shortcuts.rs
@@ -4,7 +4,7 @@ use std::{collections::HashMap, fmt::Debug, time::Duration};
 
 use futures_util::{Stream, TryFutureExt};
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::{
+use zvariant::{
     DeserializeDict, ObjectPath, OwnedObjectPath, OwnedValue, SerializeDict, Type,
 };
 
diff --git a/src/desktop/icon.rs b/src/desktop/icon.rs
index 3efee23..2e585dc 100644
--- a/src/desktop/icon.rs
+++ b/src/desktop/icon.rs
@@ -3,7 +3,7 @@ use serde::{
     ser::{Serialize, SerializeTuple},
     Deserialize,
 };
-use zbus::zvariant::{self, OwnedValue, Type, Value};
+use zvariant::{self, OwnedValue, Type, Value};
 
 use crate::Error;
 
@@ -190,7 +190,7 @@ impl TryFrom<&Value<'_>> for Icon {
 
 #[cfg(test)]
 mod test {
-    use zbus::zvariant::{serialized::Context, to_bytes, Endian};
+    use zvariant::{serialized::Context, to_bytes, Endian};
 
     use super::*;
 
diff --git a/src/desktop/inhibit.rs b/src/desktop/inhibit.rs
index 32d2b0e..3226440 100644
--- a/src/desktop/inhibit.rs
+++ b/src/desktop/inhibit.rs
@@ -43,7 +43,7 @@ use enumflags2::{bitflags, BitFlags};
 use futures_util::{Stream, TryFutureExt};
 use serde::Deserialize;
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{DeserializeDict, ObjectPath, OwnedObjectPath, SerializeDict, Type};
+use zvariant::{DeserializeDict, ObjectPath, OwnedObjectPath, SerializeDict, Type};
 
 use super::{session::SessionPortal, HandleToken, Request, Session};
 use crate::{desktop::session::CreateSessionResponse, proxy::Proxy, Error, WindowIdentifier};
diff --git a/src/desktop/input_capture.rs b/src/desktop/input_capture.rs
index 73615d9..107d29e 100644
--- a/src/desktop/input_capture.rs
+++ b/src/desktop/input_capture.rs
@@ -296,7 +296,7 @@ use enumflags2::{bitflags, BitFlags};
 use futures_util::{Stream, TryFutureExt};
 use serde::Deserialize;
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{
+use zvariant::{
     self, DeserializeDict, ObjectPath, OwnedObjectPath, OwnedValue, SerializeDict, Type, Value,
 };
 
diff --git a/src/desktop/location.rs b/src/desktop/location.rs
index 7dabb0e..7a893f8 100644
--- a/src/desktop/location.rs
+++ b/src/desktop/location.rs
@@ -33,7 +33,7 @@ use std::fmt::Debug;
 use futures_util::{Stream, TryFutureExt};
 use serde::Deserialize;
 use serde_repr::Serialize_repr;
-use zbus::zvariant::{DeserializeDict, ObjectPath, OwnedObjectPath, SerializeDict, Type};
+use zvariant::{DeserializeDict, ObjectPath, OwnedObjectPath, SerializeDict, Type};
 
 use super::{session::SessionPortal, HandleToken, Request, Session};
 use crate::{proxy::Proxy, Error, WindowIdentifier};
diff --git a/src/desktop/mod.rs b/src/desktop/mod.rs
index dceb833..7ce1895 100644
--- a/src/desktop/mod.rs
+++ b/src/desktop/mod.rs
@@ -60,7 +60,7 @@ pub mod wallpaper;
 #[cfg_attr(feature = "glib", derive(glib::Enum))]
 #[cfg_attr(feature = "glib", enum_type(name = "AshpdPersistMode"))]
 #[derive(
-    Default, serde_repr::Serialize_repr, PartialEq, Eq, Debug, Copy, Clone, zbus::zvariant::Type,
+    Default, serde_repr::Serialize_repr, PartialEq, Eq, Debug, Copy, Clone, zvariant::Type,
 )]
 #[doc(alias = "XdpPersistMode")]
 #[repr(u32)]
diff --git a/src/desktop/network_monitor.rs b/src/desktop/network_monitor.rs
index 0f0eb5c..7d1952e 100644
--- a/src/desktop/network_monitor.rs
+++ b/src/desktop/network_monitor.rs
@@ -21,7 +21,7 @@ use std::fmt;
 
 use futures_util::Stream;
 use serde_repr::Deserialize_repr;
-use zbus::zvariant::{DeserializeDict, Type};
+use zvariant::{DeserializeDict, Type};
 
 use crate::{proxy::Proxy, Error};
 
diff --git a/src/desktop/notification.rs b/src/desktop/notification.rs
index 9a70bcf..b4d952d 100644
--- a/src/desktop/notification.rs
+++ b/src/desktop/notification.rs
@@ -8,7 +8,7 @@
 //!     Icon,
 //! };
 //! use futures_util::StreamExt;
-//! use zbus::zvariant::Value;
+//! use zvariant::Value;
 //!
 //! async fn run() -> ashpd::Result<()> {
 //!     let proxy = NotificationProxy::new().await?;
@@ -54,7 +54,7 @@ use std::{fmt, str::FromStr};
 
 use futures_util::Stream;
 use serde::{self, Deserialize, Serialize};
-use zbus::zvariant::{OwnedValue, SerializeDict, Type, Value};
+use zvariant::{OwnedValue, SerializeDict, Type, Value};
 
 use super::Icon;
 use crate::{proxy::Proxy, Error};
diff --git a/src/desktop/open_uri.rs b/src/desktop/open_uri.rs
index 05a38dd..9bb815d 100644
--- a/src/desktop/open_uri.rs
+++ b/src/desktop/open_uri.rs
@@ -54,7 +54,7 @@
 use std::os::fd::BorrowedFd;
 
 use url::Url;
-use zbus::zvariant::{Fd, SerializeDict, Type};
+use zvariant::{Fd, SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, ActivationToken, Error, WindowIdentifier};
diff --git a/src/desktop/print.rs b/src/desktop/print.rs
index e0b8ed0..fcc3110 100644
--- a/src/desktop/print.rs
+++ b/src/desktop/print.rs
@@ -41,7 +41,7 @@
 use std::{fmt, os::fd::BorrowedFd, str::FromStr};
 
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::{DeserializeDict, Fd, SerializeDict, Type};
+use zvariant::{DeserializeDict, Fd, SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, Error, WindowIdentifier};
diff --git a/src/desktop/remote_desktop.rs b/src/desktop/remote_desktop.rs
index bc7f56b..a0b9b89 100644
--- a/src/desktop/remote_desktop.rs
+++ b/src/desktop/remote_desktop.rs
@@ -100,7 +100,7 @@ use std::{collections::HashMap, os::fd::OwnedFd};
 use enumflags2::{bitflags, BitFlags};
 use futures_util::TryFutureExt;
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{self, DeserializeDict, SerializeDict, Type, Value};
+use zvariant::{self, DeserializeDict, SerializeDict, Type, Value};
 
 use super::{
     screencast::Stream, session::SessionPortal, HandleToken, PersistMode, Request, Session,
diff --git a/src/desktop/request.rs b/src/desktop/request.rs
index 039e1a0..2038171 100644
--- a/src/desktop/request.rs
+++ b/src/desktop/request.rs
@@ -279,7 +279,7 @@ where
 
 #[cfg(test)]
 mod tests {
-    use zbus::zvariant::Value;
+    use zvariant::Value;
 
     use super::*;
 
diff --git a/src/desktop/screencast.rs b/src/desktop/screencast.rs
index 1defb24..b4b12ee 100644
--- a/src/desktop/screencast.rs
+++ b/src/desktop/screencast.rs
@@ -47,7 +47,7 @@ use enumflags2::{bitflags, BitFlags};
 use futures_util::TryFutureExt;
 use serde::Deserialize;
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{self, DeserializeDict, SerializeDict, Type, Value};
+use zvariant::{self, DeserializeDict, SerializeDict, Type, Value};
 
 use super::{
     remote_desktop::RemoteDesktop, session::SessionPortal, HandleToken, PersistMode, Request,
diff --git a/src/desktop/screenshot.rs b/src/desktop/screenshot.rs
index b00faab..6180161 100644
--- a/src/desktop/screenshot.rs
+++ b/src/desktop/screenshot.rs
@@ -35,7 +35,7 @@
 //! ```
 use std::fmt::Debug;
 
-use zbus::zvariant::{DeserializeDict, SerializeDict, Type};
+use zvariant::{DeserializeDict, SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{desktop::Color, proxy::Proxy, Error, WindowIdentifier};
diff --git a/src/desktop/secret.rs b/src/desktop/secret.rs
index fcf70dd..e8050f1 100644
--- a/src/desktop/secret.rs
+++ b/src/desktop/secret.rs
@@ -26,7 +26,7 @@ use async_net::unix::UnixStream;
 use futures_util::AsyncReadExt;
 #[cfg(feature = "tokio")]
 use tokio::{io::AsyncReadExt, net::UnixStream};
-use zbus::zvariant::{Fd, SerializeDict, Type};
+use zvariant::{Fd, SerializeDict, Type};
 
 use super::{HandleToken, Request};
 use crate::{proxy::Proxy, Error};
diff --git a/src/desktop/session.rs b/src/desktop/session.rs
index a236843..3d64abb 100644
--- a/src/desktop/session.rs
+++ b/src/desktop/session.rs
@@ -2,7 +2,7 @@ use std::{collections::HashMap, fmt::Debug, marker::PhantomData};
 
 use futures_util::Stream;
 use serde::{Deserialize, Serialize, Serializer};
-use zbus::zvariant::{ObjectPath, OwnedObjectPath, OwnedValue, Type};
+use zvariant::{ObjectPath, OwnedObjectPath, OwnedValue, Type};
 
 use crate::{desktop::HandleToken, proxy::Proxy, Error};
 
diff --git a/src/desktop/settings.rs b/src/desktop/settings.rs
index 3eb216e..48d9d59 100644
--- a/src/desktop/settings.rs
+++ b/src/desktop/settings.rs
@@ -31,7 +31,7 @@ use std::{collections::HashMap, convert::TryFrom, fmt::Debug, future::ready};
 
 use futures_util::{Stream, StreamExt};
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::{OwnedValue, Type, Value};
+use zvariant::{OwnedValue, Type, Value};
 
 use crate::{desktop::Color, proxy::Proxy, Error};
 
diff --git a/src/desktop/trash.rs b/src/desktop/trash.rs
index 44bc7f5..600bb9c 100644
--- a/src/desktop/trash.rs
+++ b/src/desktop/trash.rs
@@ -33,7 +33,7 @@
 use std::os::fd::BorrowedFd;
 
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{Fd, Type};
+use zvariant::{Fd, Type};
 
 use crate::{error::PortalError, proxy::Proxy, Error};
 
diff --git a/src/desktop/wallpaper.rs b/src/desktop/wallpaper.rs
index 0004ed8..12b109a 100644
--- a/src/desktop/wallpaper.rs
+++ b/src/desktop/wallpaper.rs
@@ -42,7 +42,7 @@
 use std::{fmt, os::fd::BorrowedFd, str::FromStr};
 
 use serde::{self, Deserialize, Serialize};
-use zbus::zvariant::{Fd, SerializeDict, Type};
+use zvariant::{Fd, SerializeDict, Type};
 
 use super::Request;
 use crate::{desktop::HandleToken, proxy::Proxy, Error, WindowIdentifier};
diff --git a/src/documents/file_transfer.rs b/src/documents/file_transfer.rs
index 19d7ca0..811ade4 100644
--- a/src/documents/file_transfer.rs
+++ b/src/documents/file_transfer.rs
@@ -25,7 +25,7 @@
 use std::{collections::HashMap, os::fd::BorrowedFd};
 
 use futures_util::Stream;
-use zbus::zvariant::{Fd, SerializeDict, Type, Value};
+use zvariant::{Fd, SerializeDict, Type, Value};
 
 use crate::{proxy::Proxy, Error};
 
diff --git a/src/documents/mod.rs b/src/documents/mod.rs
index c22c7f5..75ce2aa 100644
--- a/src/documents/mod.rs
+++ b/src/documents/mod.rs
@@ -38,7 +38,7 @@ use std::{collections::HashMap, fmt, os::fd::BorrowedFd, path::Path, str::FromSt
 use enumflags2::{bitflags, BitFlags};
 use serde::{Deserialize, Serialize};
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{Fd, OwnedValue, Type};
+use zvariant::{Fd, OwnedValue, Type};
 
 pub use crate::app_id::DocumentID;
 use crate::{proxy::Proxy, AppID, Error, FilePath};
@@ -518,7 +518,7 @@ pub use file_transfer::FileTransfer;
 mod tests {
     use std::collections::HashMap;
 
-    use zbus::zvariant::Type;
+    use zvariant::Type;
 
     use crate::{app_id::DocumentID, documents::Permission, FilePath};
 
diff --git a/src/error.rs b/src/error.rs
index 8eb27a6..428bf1c 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -149,8 +149,8 @@ impl From<zbus::Error> for Error {
     }
 }
 
-impl From<zbus::zvariant::Error> for Error {
-    fn from(e: zbus::zvariant::Error) -> Self {
+impl From<zvariant::Error> for Error {
+    fn from(e: zvariant::Error) -> Self {
         Self::Zbus(zbus::Error::Variant(e))
     }
 }
diff --git a/src/file_path.rs b/src/file_path.rs
index cb57f31..c3b41f1 100644
--- a/src/file_path.rs
+++ b/src/file_path.rs
@@ -5,7 +5,7 @@ use std::{
 };
 
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::Type;
+use zvariant::Type;
 
 /// A file name represented as a nul-terminated byte array.
 #[derive(Type, Debug, Default, PartialEq)]
@@ -51,7 +51,7 @@ impl<'de> Deserialize<'de> for FilePath {
 
 #[cfg(test)]
 mod tests {
-    use zbus::zvariant::{
+    use zvariant::{
         serialized::{Context, Data},
         to_bytes, Endian,
     };
diff --git a/src/flatpak/development.rs b/src/flatpak/development.rs
index e1ae10b..762a65c 100644
--- a/src/flatpak/development.rs
+++ b/src/flatpak/development.rs
@@ -7,7 +7,7 @@ use std::{collections::HashMap, os::fd::BorrowedFd, path::Path};
 use enumflags2::{bitflags, BitFlags};
 use futures_util::Stream;
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{Fd, Type};
+use zvariant::{Fd, Type};
 
 use crate::{proxy::Proxy, Error, FilePath, Pid};
 
diff --git a/src/flatpak/mod.rs b/src/flatpak/mod.rs
index c9037a7..aff6d12 100644
--- a/src/flatpak/mod.rs
+++ b/src/flatpak/mod.rs
@@ -36,7 +36,7 @@ use enumflags2::{bitflags, BitFlags};
 use futures_util::Stream;
 use serde::Serialize;
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{self, Fd, OwnedObjectPath, SerializeDict, Type};
+use zvariant::{self, Fd, OwnedObjectPath, SerializeDict, Type};
 
 use crate::{proxy::Proxy, Error, FilePath, Pid};
 
diff --git a/src/flatpak/update_monitor.rs b/src/flatpak/update_monitor.rs
index 8e942f3..7305ef4 100644
--- a/src/flatpak/update_monitor.rs
+++ b/src/flatpak/update_monitor.rs
@@ -28,7 +28,7 @@
 
 use futures_util::Stream;
 use serde_repr::{Deserialize_repr, Serialize_repr};
-use zbus::zvariant::{DeserializeDict, ObjectPath, SerializeDict, Type};
+use zvariant::{DeserializeDict, ObjectPath, SerializeDict, Type};
 
 use crate::{proxy::Proxy, Error, WindowIdentifier};
 
diff --git a/src/lib.rs b/src/lib.rs
index 9380019..c17435f 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -39,7 +39,7 @@ use std::sync::OnceLock;
 
 pub use enumflags2;
 pub use url;
-pub use zbus::{self, zvariant};
+pub use zbus::{self};
 
 /// Check whether the application is running inside a sandbox.
 ///
diff --git a/src/proxy.rs b/src/proxy.rs
index f053be9..4ab85a1 100644
--- a/src/proxy.rs
+++ b/src/proxy.rs
@@ -2,7 +2,7 @@ use std::{fmt::Debug, future::ready, ops::Deref, sync::OnceLock};
 
 use futures_util::{Stream, StreamExt};
 use serde::{Deserialize, Serialize};
-use zbus::zvariant::{ObjectPath, OwnedValue, Type};
+use zvariant::{ObjectPath, OwnedValue, Type};
 #[cfg(feature = "tracing")]
 use zbus::Message;
 
diff --git a/src/window_identifier/mod.rs b/src/window_identifier/mod.rs
index 62f45ef..2744f0e 100644
--- a/src/window_identifier/mod.rs
+++ b/src/window_identifier/mod.rs
@@ -7,7 +7,7 @@ use raw_window_handle::{
 #[cfg(feature = "raw_handle")]
 use raw_window_handle::{RawDisplayHandle, RawWindowHandle};
 use serde::{ser::Serializer, Deserialize, Serialize};
-use zbus::zvariant::Type;
+use zvariant::Type;
 /// Most portals interact with the user by showing dialogs.
 /// These dialogs should generally be placed on top of the application window
 /// that triggered them. To arrange this, the compositor needs to know about the
